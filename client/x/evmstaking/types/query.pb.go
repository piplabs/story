// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: story/evmstaking/v1/types/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3aa04b15d8dc955, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3aa04b15d8dc955, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryGetWithdrawalQueueRequest is the request type for the Query/WithdrawalQueue RPC method.
type QueryGetWithdrawalQueueRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetWithdrawalQueueRequest) Reset()         { *m = QueryGetWithdrawalQueueRequest{} }
func (m *QueryGetWithdrawalQueueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetWithdrawalQueueRequest) ProtoMessage()    {}
func (*QueryGetWithdrawalQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3aa04b15d8dc955, []int{2}
}
func (m *QueryGetWithdrawalQueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWithdrawalQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWithdrawalQueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWithdrawalQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWithdrawalQueueRequest.Merge(m, src)
}
func (m *QueryGetWithdrawalQueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWithdrawalQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWithdrawalQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWithdrawalQueueRequest proto.InternalMessageInfo

func (m *QueryGetWithdrawalQueueRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetWithdrawalQueueResponse is the response type for the Query/WithdrawalQueue RPC method.
type QueryGetWithdrawalQueueResponse struct {
	Withdrawals []*Withdrawal `protobuf:"bytes,1,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetWithdrawalQueueResponse) Reset()         { *m = QueryGetWithdrawalQueueResponse{} }
func (m *QueryGetWithdrawalQueueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetWithdrawalQueueResponse) ProtoMessage()    {}
func (*QueryGetWithdrawalQueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3aa04b15d8dc955, []int{3}
}
func (m *QueryGetWithdrawalQueueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWithdrawalQueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWithdrawalQueueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWithdrawalQueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWithdrawalQueueResponse.Merge(m, src)
}
func (m *QueryGetWithdrawalQueueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWithdrawalQueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWithdrawalQueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWithdrawalQueueResponse proto.InternalMessageInfo

func (m *QueryGetWithdrawalQueueResponse) GetWithdrawals() []*Withdrawal {
	if m != nil {
		return m.Withdrawals
	}
	return nil
}

func (m *QueryGetWithdrawalQueueResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetRewardWithdrawalQueueRequest is the request type for the Query/RewardWithdrawalQueue RPC method.
type QueryGetRewardWithdrawalQueueRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetRewardWithdrawalQueueRequest) Reset()         { *m = QueryGetRewardWithdrawalQueueRequest{} }
func (m *QueryGetRewardWithdrawalQueueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRewardWithdrawalQueueRequest) ProtoMessage()    {}
func (*QueryGetRewardWithdrawalQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3aa04b15d8dc955, []int{4}
}
func (m *QueryGetRewardWithdrawalQueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRewardWithdrawalQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRewardWithdrawalQueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRewardWithdrawalQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRewardWithdrawalQueueRequest.Merge(m, src)
}
func (m *QueryGetRewardWithdrawalQueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRewardWithdrawalQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRewardWithdrawalQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRewardWithdrawalQueueRequest proto.InternalMessageInfo

func (m *QueryGetRewardWithdrawalQueueRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetRewardWithdrawalQueueResponse is the response type for the Query/RewardWithdrawalQueue RPC method.
type QueryGetRewardWithdrawalQueueResponse struct {
	Withdrawals []*Withdrawal `protobuf:"bytes,1,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetRewardWithdrawalQueueResponse) Reset()         { *m = QueryGetRewardWithdrawalQueueResponse{} }
func (m *QueryGetRewardWithdrawalQueueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRewardWithdrawalQueueResponse) ProtoMessage()    {}
func (*QueryGetRewardWithdrawalQueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3aa04b15d8dc955, []int{5}
}
func (m *QueryGetRewardWithdrawalQueueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRewardWithdrawalQueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRewardWithdrawalQueueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRewardWithdrawalQueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRewardWithdrawalQueueResponse.Merge(m, src)
}
func (m *QueryGetRewardWithdrawalQueueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRewardWithdrawalQueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRewardWithdrawalQueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRewardWithdrawalQueueResponse proto.InternalMessageInfo

func (m *QueryGetRewardWithdrawalQueueResponse) GetWithdrawals() []*Withdrawal {
	if m != nil {
		return m.Withdrawals
	}
	return nil
}

func (m *QueryGetRewardWithdrawalQueueResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetOperatorAddressRequest is the request type for the Query/OperatorAddress RPC method.
type QueryGetOperatorAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetOperatorAddressRequest) Reset()         { *m = QueryGetOperatorAddressRequest{} }
func (m *QueryGetOperatorAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOperatorAddressRequest) ProtoMessage()    {}
func (*QueryGetOperatorAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3aa04b15d8dc955, []int{6}
}
func (m *QueryGetOperatorAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOperatorAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOperatorAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOperatorAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOperatorAddressRequest.Merge(m, src)
}
func (m *QueryGetOperatorAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOperatorAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOperatorAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOperatorAddressRequest proto.InternalMessageInfo

func (m *QueryGetOperatorAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryGetOperatorAddressResponse is the response type for the Query/OperatorAddress RPC method.
type QueryGetOperatorAddressResponse struct {
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
}

func (m *QueryGetOperatorAddressResponse) Reset()         { *m = QueryGetOperatorAddressResponse{} }
func (m *QueryGetOperatorAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOperatorAddressResponse) ProtoMessage()    {}
func (*QueryGetOperatorAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3aa04b15d8dc955, []int{7}
}
func (m *QueryGetOperatorAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOperatorAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOperatorAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOperatorAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOperatorAddressResponse.Merge(m, src)
}
func (m *QueryGetOperatorAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOperatorAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOperatorAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOperatorAddressResponse proto.InternalMessageInfo

func (m *QueryGetOperatorAddressResponse) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

// QueryGetWithdrawAddressRequest is the request type for the Query/WithdrawAddress RPC method.
type QueryGetWithdrawAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetWithdrawAddressRequest) Reset()         { *m = QueryGetWithdrawAddressRequest{} }
func (m *QueryGetWithdrawAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetWithdrawAddressRequest) ProtoMessage()    {}
func (*QueryGetWithdrawAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3aa04b15d8dc955, []int{8}
}
func (m *QueryGetWithdrawAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWithdrawAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWithdrawAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWithdrawAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWithdrawAddressRequest.Merge(m, src)
}
func (m *QueryGetWithdrawAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWithdrawAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWithdrawAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWithdrawAddressRequest proto.InternalMessageInfo

func (m *QueryGetWithdrawAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryGetWithdrawAddressResponse is the response type for the Query/WithdrawAddress RPC method.
type QueryGetWithdrawAddressResponse struct {
	WithdrawAddress string `protobuf:"bytes,1,opt,name=withdraw_address,json=withdrawAddress,proto3" json:"withdraw_address,omitempty"`
}

func (m *QueryGetWithdrawAddressResponse) Reset()         { *m = QueryGetWithdrawAddressResponse{} }
func (m *QueryGetWithdrawAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetWithdrawAddressResponse) ProtoMessage()    {}
func (*QueryGetWithdrawAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3aa04b15d8dc955, []int{9}
}
func (m *QueryGetWithdrawAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWithdrawAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWithdrawAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWithdrawAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWithdrawAddressResponse.Merge(m, src)
}
func (m *QueryGetWithdrawAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWithdrawAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWithdrawAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWithdrawAddressResponse proto.InternalMessageInfo

func (m *QueryGetWithdrawAddressResponse) GetWithdrawAddress() string {
	if m != nil {
		return m.WithdrawAddress
	}
	return ""
}

// QueryGetRewardAddressRequest is the request type for the Query/RewardAddress RPC method.
type QueryGetRewardAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetRewardAddressRequest) Reset()         { *m = QueryGetRewardAddressRequest{} }
func (m *QueryGetRewardAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRewardAddressRequest) ProtoMessage()    {}
func (*QueryGetRewardAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3aa04b15d8dc955, []int{10}
}
func (m *QueryGetRewardAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRewardAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRewardAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRewardAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRewardAddressRequest.Merge(m, src)
}
func (m *QueryGetRewardAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRewardAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRewardAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRewardAddressRequest proto.InternalMessageInfo

func (m *QueryGetRewardAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryGetRewardAddressResponse is the response type for the Query/RewardAddress RPC method.
type QueryGetRewardAddressResponse struct {
	RewardAddress string `protobuf:"bytes,1,opt,name=reward_address,json=rewardAddress,proto3" json:"reward_address,omitempty"`
}

func (m *QueryGetRewardAddressResponse) Reset()         { *m = QueryGetRewardAddressResponse{} }
func (m *QueryGetRewardAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRewardAddressResponse) ProtoMessage()    {}
func (*QueryGetRewardAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3aa04b15d8dc955, []int{11}
}
func (m *QueryGetRewardAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRewardAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRewardAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRewardAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRewardAddressResponse.Merge(m, src)
}
func (m *QueryGetRewardAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRewardAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRewardAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRewardAddressResponse proto.InternalMessageInfo

func (m *QueryGetRewardAddressResponse) GetRewardAddress() string {
	if m != nil {
		return m.RewardAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "story.evmstaking.v1.types.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "story.evmstaking.v1.types.QueryParamsResponse")
	proto.RegisterType((*QueryGetWithdrawalQueueRequest)(nil), "story.evmstaking.v1.types.QueryGetWithdrawalQueueRequest")
	proto.RegisterType((*QueryGetWithdrawalQueueResponse)(nil), "story.evmstaking.v1.types.QueryGetWithdrawalQueueResponse")
	proto.RegisterType((*QueryGetRewardWithdrawalQueueRequest)(nil), "story.evmstaking.v1.types.QueryGetRewardWithdrawalQueueRequest")
	proto.RegisterType((*QueryGetRewardWithdrawalQueueResponse)(nil), "story.evmstaking.v1.types.QueryGetRewardWithdrawalQueueResponse")
	proto.RegisterType((*QueryGetOperatorAddressRequest)(nil), "story.evmstaking.v1.types.QueryGetOperatorAddressRequest")
	proto.RegisterType((*QueryGetOperatorAddressResponse)(nil), "story.evmstaking.v1.types.QueryGetOperatorAddressResponse")
	proto.RegisterType((*QueryGetWithdrawAddressRequest)(nil), "story.evmstaking.v1.types.QueryGetWithdrawAddressRequest")
	proto.RegisterType((*QueryGetWithdrawAddressResponse)(nil), "story.evmstaking.v1.types.QueryGetWithdrawAddressResponse")
	proto.RegisterType((*QueryGetRewardAddressRequest)(nil), "story.evmstaking.v1.types.QueryGetRewardAddressRequest")
	proto.RegisterType((*QueryGetRewardAddressResponse)(nil), "story.evmstaking.v1.types.QueryGetRewardAddressResponse")
}

func init() {
	proto.RegisterFile("story/evmstaking/v1/types/query.proto", fileDescriptor_c3aa04b15d8dc955)
}

var fileDescriptor_c3aa04b15d8dc955 = []byte{
	// 680 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0x4d, 0x4f, 0x13, 0x41,
	0x18, 0xc7, 0xbb, 0xa8, 0xa8, 0x43, 0x54, 0x32, 0x72, 0xc0, 0x06, 0x17, 0xdd, 0xd0, 0x8a, 0x46,
	0x66, 0xd2, 0x1a, 0x23, 0x72, 0x41, 0x39, 0xc0, 0x85, 0x44, 0xd8, 0x83, 0x26, 0x5e, 0xc8, 0x94,
	0x4e, 0x96, 0x8d, 0xed, 0xce, 0xb2, 0x33, 0x6d, 0xe5, 0xea, 0xdd, 0xc4, 0xc4, 0x8f, 0xc2, 0xc9,
	0xf8, 0x05, 0x38, 0x92, 0xe8, 0xc1, 0x13, 0x31, 0xad, 0x1f, 0xc4, 0x74, 0x66, 0x96, 0x7d, 0x69,
	0xb7, 0xdd, 0x36, 0x31, 0xf1, 0x06, 0x9d, 0xe7, 0xff, 0x3c, 0xbf, 0xe7, 0x35, 0x0b, 0x4a, 0x5c,
	0xb0, 0xe0, 0x04, 0xd3, 0x76, 0x93, 0x0b, 0xf2, 0xc1, 0xf5, 0x1c, 0xdc, 0xae, 0x60, 0x71, 0xe2,
	0x53, 0x8e, 0x8f, 0x5b, 0x34, 0x38, 0x41, 0x7e, 0xc0, 0x04, 0x83, 0xf7, 0xa4, 0x19, 0x8a, 0xcc,
	0x50, 0xbb, 0x82, 0xa4, 0x59, 0x71, 0xc1, 0x61, 0x0e, 0x93, 0x56, 0xb8, 0xff, 0x97, 0x12, 0x14,
	0x97, 0x1c, 0xc6, 0x9c, 0x06, 0xc5, 0xc4, 0x77, 0x31, 0xf1, 0x3c, 0x26, 0x88, 0x70, 0x99, 0xc7,
	0xf5, 0xeb, 0x93, 0x43, 0xc6, 0x9b, 0x8c, 0xe3, 0x1a, 0xe1, 0x54, 0xc5, 0xc1, 0xed, 0x4a, 0x8d,
	0x0a, 0x52, 0xc1, 0x3e, 0x71, 0x5c, 0x4f, 0x1a, 0x6b, 0xdb, 0x72, 0x36, 0xa1, 0x4f, 0x02, 0xd2,
	0xbc, 0xf4, 0x99, 0x6d, 0x17, 0xc3, 0x96, 0xb6, 0xd6, 0x02, 0x80, 0xfb, 0xfd, 0xa8, 0x7b, 0xd2,
	0x81, 0x4d, 0x8f, 0x5b, 0x94, 0x0b, 0xeb, 0x2d, 0xb8, 0x9b, 0xf8, 0x95, 0xfb, 0xcc, 0xe3, 0x14,
	0x6e, 0x82, 0x59, 0x15, 0x68, 0xd1, 0x78, 0x60, 0xac, 0xce, 0x55, 0x1f, 0xa2, 0xcc, 0x62, 0x20,
	0x25, 0xdd, 0xba, 0x7a, 0x76, 0xb1, 0x5c, 0xb0, 0xb5, 0xcc, 0x3a, 0x02, 0xa6, 0xf4, 0xbb, 0x43,
	0xc5, 0x3b, 0x57, 0x1c, 0xd5, 0x03, 0xd2, 0x21, 0x8d, 0xfd, 0x16, 0x6d, 0x51, 0x1d, 0x19, 0x6e,
	0x03, 0x10, 0xe5, 0xad, 0xc3, 0x94, 0x91, 0x2a, 0x12, 0xea, 0x17, 0x09, 0xa9, 0x66, 0xe8, 0x22,
	0xa1, 0x3d, 0xe2, 0x84, 0x5a, 0x3b, 0xa6, 0xb4, 0x4e, 0x0d, 0xb0, 0x9c, 0x19, 0x4a, 0xa7, 0xb3,
	0x03, 0xe6, 0x3a, 0x97, 0x4f, 0xfd, 0x9c, 0xae, 0xac, 0xce, 0x55, 0x4b, 0x23, 0x72, 0x8a, 0x1c,
	0xd9, 0x71, 0x25, 0xdc, 0x49, 0x40, 0xcf, 0x48, 0xe8, 0x47, 0x63, 0xa1, 0x15, 0x45, 0x82, 0xda,
	0x03, 0x2b, 0x21, 0xb4, 0x4d, 0x3b, 0x24, 0xa8, 0xff, 0xe3, 0x2a, 0x7d, 0x33, 0x40, 0x69, 0x4c,
	0xc0, 0xff, 0xb6, 0x56, 0x1b, 0xd1, 0x2c, 0xbd, 0xf1, 0x69, 0x40, 0x04, 0x0b, 0x5e, 0xd7, 0xeb,
	0x01, 0xe5, 0xe1, 0x14, 0xc3, 0x45, 0x70, 0x9d, 0xa8, 0x5f, 0x64, 0x89, 0x6e, 0xda, 0xe1, 0xbf,
	0xd6, 0x6e, 0x34, 0x1c, 0x03, 0x5a, 0x9d, 0xf0, 0x63, 0x30, 0xcf, 0xf4, 0xd3, 0x41, 0xd2, 0xcb,
	0x1d, 0x96, 0x94, 0xc4, 0x49, 0xc2, 0xac, 0xa7, 0x21, 0x19, 0xd0, 0x46, 0x24, 0x61, 0x01, 0xd3,
	0x24, 0x9d, 0xa4, 0xc4, 0x5a, 0x07, 0x4b, 0xc9, 0x76, 0xe6, 0xe6, 0xd8, 0x06, 0xf7, 0x33, 0x94,
	0x9a, 0xa2, 0x04, 0x6e, 0x07, 0xf2, 0x21, 0xc5, 0x70, 0x2b, 0x88, 0x9b, 0x57, 0x2f, 0x6e, 0x80,
	0x6b, 0xd2, 0x11, 0xfc, 0x6c, 0x80, 0x59, 0x75, 0x04, 0xe0, 0xda, 0x88, 0x39, 0x19, 0xbc, 0x3e,
	0x45, 0x94, 0xd7, 0x5c, 0xa1, 0x59, 0x2b, 0x9f, 0x7e, 0xfc, 0xf9, 0x3a, 0x63, 0xc2, 0x25, 0x7c,
	0xd8, 0x70, 0xa9, 0x27, 0x52, 0x97, 0x4f, 0xdd, 0x1e, 0xf8, 0xdd, 0x00, 0x70, 0xf0, 0x18, 0xc0,
	0x97, 0xe3, 0x82, 0x65, 0xde, 0xaa, 0xe2, 0xc6, 0x34, 0x52, 0xcd, 0x8c, 0x24, 0xf3, 0x2a, 0x2c,
	0x0f, 0x67, 0x8e, 0x36, 0xe6, 0xe0, 0x58, 0x62, 0xfe, 0x34, 0xc0, 0x62, 0xd6, 0x92, 0xc2, 0xcd,
	0x1c, 0x20, 0xa3, 0xee, 0x49, 0xf1, 0xd5, 0xf4, 0x0e, 0x74, 0x3e, 0xcf, 0x65, 0x3e, 0x18, 0xae,
	0x0d, 0xcf, 0x47, 0x8f, 0xce, 0x40, 0x5a, 0xba, 0x29, 0xa9, 0x25, 0xcc, 0xd5, 0x94, 0xe1, 0x4b,
	0x9f, 0xab, 0x29, 0x19, 0x3b, 0x3f, 0xae, 0x29, 0xe9, 0x7b, 0x90, 0x1e, 0xa9, 0x49, 0xe8, 0x87,
	0x1f, 0x8a, 0x89, 0x46, 0x6a, 0x42, 0xfa, 0xf4, 0x0d, 0x81, 0xa7, 0x06, 0x98, 0x4f, 0xaf, 0x3b,
	0x7c, 0x91, 0x7b, 0x12, 0x52, 0xe4, 0xeb, 0x93, 0x0b, 0x35, 0xf7, 0x53, 0xc9, 0x5d, 0x86, 0x2b,
	0x23, 0x47, 0x47, 0x53, 0x6f, 0xed, 0x9e, 0x75, 0x4d, 0xe3, 0xbc, 0x6b, 0x1a, 0xbf, 0xbb, 0xa6,
	0xf1, 0xa5, 0x67, 0x16, 0xce, 0x7b, 0x66, 0xe1, 0x57, 0xcf, 0x2c, 0xbc, 0xaf, 0x3a, 0xae, 0x38,
	0x6a, 0xd5, 0xd0, 0x21, 0x6b, 0x62, 0xdf, 0xf5, 0x1b, 0xa4, 0xc6, 0xb1, 0xfa, 0x12, 0xd2, 0x7e,
	0x3f, 0xc6, 0x3d, 0x4b, 0xb2, 0xda, 0xac, 0xfc, 0x0a, 0x7a, 0xf6, 0x37, 0x00, 0x00, 0xff, 0xff,
	0xf0, 0x65, 0x96, 0xf7, 0xfd, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// GetWithdrawalQueue queries the withdrawal queue of the module.
	GetWithdrawalQueue(ctx context.Context, in *QueryGetWithdrawalQueueRequest, opts ...grpc.CallOption) (*QueryGetWithdrawalQueueResponse, error)
	// GetRewardWithdrawalQueue queries the reward withdrawal queue of the module.
	GetRewardWithdrawalQueue(ctx context.Context, in *QueryGetRewardWithdrawalQueueRequest, opts ...grpc.CallOption) (*QueryGetRewardWithdrawalQueueResponse, error)
	// GetOperatorAddress queries the operator address of a delegator.
	GetOperatorAddress(ctx context.Context, in *QueryGetOperatorAddressRequest, opts ...grpc.CallOption) (*QueryGetOperatorAddressResponse, error)
	// GetWithdrawalAddress queries the withdrawal address of a delegator.
	GetWithdrawAddress(ctx context.Context, in *QueryGetWithdrawAddressRequest, opts ...grpc.CallOption) (*QueryGetWithdrawAddressResponse, error)
	// GetRewardAddress queries the reward address of a delegator.
	GetRewardAddress(ctx context.Context, in *QueryGetRewardAddressRequest, opts ...grpc.CallOption) (*QueryGetRewardAddressResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/story.evmstaking.v1.types.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetWithdrawalQueue(ctx context.Context, in *QueryGetWithdrawalQueueRequest, opts ...grpc.CallOption) (*QueryGetWithdrawalQueueResponse, error) {
	out := new(QueryGetWithdrawalQueueResponse)
	err := c.cc.Invoke(ctx, "/story.evmstaking.v1.types.Query/GetWithdrawalQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRewardWithdrawalQueue(ctx context.Context, in *QueryGetRewardWithdrawalQueueRequest, opts ...grpc.CallOption) (*QueryGetRewardWithdrawalQueueResponse, error) {
	out := new(QueryGetRewardWithdrawalQueueResponse)
	err := c.cc.Invoke(ctx, "/story.evmstaking.v1.types.Query/GetRewardWithdrawalQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOperatorAddress(ctx context.Context, in *QueryGetOperatorAddressRequest, opts ...grpc.CallOption) (*QueryGetOperatorAddressResponse, error) {
	out := new(QueryGetOperatorAddressResponse)
	err := c.cc.Invoke(ctx, "/story.evmstaking.v1.types.Query/GetOperatorAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetWithdrawAddress(ctx context.Context, in *QueryGetWithdrawAddressRequest, opts ...grpc.CallOption) (*QueryGetWithdrawAddressResponse, error) {
	out := new(QueryGetWithdrawAddressResponse)
	err := c.cc.Invoke(ctx, "/story.evmstaking.v1.types.Query/GetWithdrawAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRewardAddress(ctx context.Context, in *QueryGetRewardAddressRequest, opts ...grpc.CallOption) (*QueryGetRewardAddressResponse, error) {
	out := new(QueryGetRewardAddressResponse)
	err := c.cc.Invoke(ctx, "/story.evmstaking.v1.types.Query/GetRewardAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// GetWithdrawalQueue queries the withdrawal queue of the module.
	GetWithdrawalQueue(context.Context, *QueryGetWithdrawalQueueRequest) (*QueryGetWithdrawalQueueResponse, error)
	// GetRewardWithdrawalQueue queries the reward withdrawal queue of the module.
	GetRewardWithdrawalQueue(context.Context, *QueryGetRewardWithdrawalQueueRequest) (*QueryGetRewardWithdrawalQueueResponse, error)
	// GetOperatorAddress queries the operator address of a delegator.
	GetOperatorAddress(context.Context, *QueryGetOperatorAddressRequest) (*QueryGetOperatorAddressResponse, error)
	// GetWithdrawalAddress queries the withdrawal address of a delegator.
	GetWithdrawAddress(context.Context, *QueryGetWithdrawAddressRequest) (*QueryGetWithdrawAddressResponse, error)
	// GetRewardAddress queries the reward address of a delegator.
	GetRewardAddress(context.Context, *QueryGetRewardAddressRequest) (*QueryGetRewardAddressResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetWithdrawalQueue(ctx context.Context, req *QueryGetWithdrawalQueueRequest) (*QueryGetWithdrawalQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawalQueue not implemented")
}
func (*UnimplementedQueryServer) GetRewardWithdrawalQueue(ctx context.Context, req *QueryGetRewardWithdrawalQueueRequest) (*QueryGetRewardWithdrawalQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardWithdrawalQueue not implemented")
}
func (*UnimplementedQueryServer) GetOperatorAddress(ctx context.Context, req *QueryGetOperatorAddressRequest) (*QueryGetOperatorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorAddress not implemented")
}
func (*UnimplementedQueryServer) GetWithdrawAddress(ctx context.Context, req *QueryGetWithdrawAddressRequest) (*QueryGetWithdrawAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawAddress not implemented")
}
func (*UnimplementedQueryServer) GetRewardAddress(ctx context.Context, req *QueryGetRewardAddressRequest) (*QueryGetRewardAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardAddress not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/story.evmstaking.v1.types.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetWithdrawalQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetWithdrawalQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWithdrawalQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/story.evmstaking.v1.types.Query/GetWithdrawalQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWithdrawalQueue(ctx, req.(*QueryGetWithdrawalQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRewardWithdrawalQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRewardWithdrawalQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRewardWithdrawalQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/story.evmstaking.v1.types.Query/GetRewardWithdrawalQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRewardWithdrawalQueue(ctx, req.(*QueryGetRewardWithdrawalQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOperatorAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOperatorAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOperatorAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/story.evmstaking.v1.types.Query/GetOperatorAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOperatorAddress(ctx, req.(*QueryGetOperatorAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetWithdrawAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetWithdrawAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWithdrawAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/story.evmstaking.v1.types.Query/GetWithdrawAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWithdrawAddress(ctx, req.(*QueryGetWithdrawAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRewardAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRewardAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRewardAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/story.evmstaking.v1.types.Query/GetRewardAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRewardAddress(ctx, req.(*QueryGetRewardAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "story.evmstaking.v1.types.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetWithdrawalQueue",
			Handler:    _Query_GetWithdrawalQueue_Handler,
		},
		{
			MethodName: "GetRewardWithdrawalQueue",
			Handler:    _Query_GetRewardWithdrawalQueue_Handler,
		},
		{
			MethodName: "GetOperatorAddress",
			Handler:    _Query_GetOperatorAddress_Handler,
		},
		{
			MethodName: "GetWithdrawAddress",
			Handler:    _Query_GetWithdrawAddress_Handler,
		},
		{
			MethodName: "GetRewardAddress",
			Handler:    _Query_GetRewardAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "story/evmstaking/v1/types/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetWithdrawalQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWithdrawalQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWithdrawalQueueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWithdrawalQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWithdrawalQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWithdrawalQueueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Withdrawals) > 0 {
		for iNdEx := len(m.Withdrawals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Withdrawals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRewardWithdrawalQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRewardWithdrawalQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRewardWithdrawalQueueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRewardWithdrawalQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRewardWithdrawalQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRewardWithdrawalQueueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Withdrawals) > 0 {
		for iNdEx := len(m.Withdrawals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Withdrawals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOperatorAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOperatorAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOperatorAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOperatorAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOperatorAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOperatorAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWithdrawAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWithdrawAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWithdrawAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWithdrawAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWithdrawAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWithdrawAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawAddress) > 0 {
		i -= len(m.WithdrawAddress)
		copy(dAtA[i:], m.WithdrawAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WithdrawAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRewardAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRewardAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRewardAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRewardAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRewardAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRewardAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardAddress) > 0 {
		i -= len(m.RewardAddress)
		copy(dAtA[i:], m.RewardAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RewardAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetWithdrawalQueueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetWithdrawalQueueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Withdrawals) > 0 {
		for _, e := range m.Withdrawals {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRewardWithdrawalQueueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRewardWithdrawalQueueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Withdrawals) > 0 {
		for _, e := range m.Withdrawals {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOperatorAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOperatorAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetWithdrawAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetWithdrawAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WithdrawAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRewardAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRewardAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWithdrawalQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWithdrawalQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWithdrawalQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWithdrawalQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWithdrawalQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWithdrawalQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdrawals = append(m.Withdrawals, &Withdrawal{})
			if err := m.Withdrawals[len(m.Withdrawals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRewardWithdrawalQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRewardWithdrawalQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRewardWithdrawalQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRewardWithdrawalQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRewardWithdrawalQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRewardWithdrawalQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdrawals = append(m.Withdrawals, &Withdrawal{})
			if err := m.Withdrawals[len(m.Withdrawals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOperatorAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOperatorAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOperatorAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOperatorAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOperatorAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOperatorAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWithdrawAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWithdrawAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWithdrawAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWithdrawAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWithdrawAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWithdrawAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRewardAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRewardAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRewardAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRewardAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRewardAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRewardAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

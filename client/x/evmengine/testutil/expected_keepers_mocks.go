// Code generated by MockGen. DO NOT EDIT.
// Source: ../client/x/evmengine/types/expected_keepers.go
//
// Generated by this command:
//
//	mockgen -source=../client/x/evmengine/types/expected_keepers.go -package testutil -destination ../client/x/evmengine/testutil/expected_keepers_mocks.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	types "cosmossdk.io/x/upgrade/types"
	types0 "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/ethereum/go-ethereum/core/types"
	types2 "github.com/piplabs/story/client/x/evmengine/types"
	bindings "github.com/piplabs/story/contracts/bindings"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountKeeper is a mock of AccountKeeper interface.
type MockAccountKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAccountKeeperMockRecorder
}

// MockAccountKeeperMockRecorder is the mock recorder for MockAccountKeeper.
type MockAccountKeeperMockRecorder struct {
	mock *MockAccountKeeper
}

// NewMockAccountKeeper creates a new mock instance.
func NewMockAccountKeeper(ctrl *gomock.Controller) *MockAccountKeeper {
	mock := &MockAccountKeeper{ctrl: ctrl}
	mock.recorder = &MockAccountKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountKeeper) EXPECT() *MockAccountKeeperMockRecorder {
	return m.recorder
}

// GetModuleAddress mocks base method.
func (m *MockAccountKeeper) GetModuleAddress(moduleName string) types0.AccAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleAddress", moduleName)
	ret0, _ := ret[0].(types0.AccAddress)
	return ret0
}

// GetModuleAddress indicates an expected call of GetModuleAddress.
func (mr *MockAccountKeeperMockRecorder) GetModuleAddress(moduleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleAddress", reflect.TypeOf((*MockAccountKeeper)(nil).GetModuleAddress), moduleName)
}

// MockEvmStakingKeeper is a mock of EvmStakingKeeper interface.
type MockEvmStakingKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockEvmStakingKeeperMockRecorder
}

// MockEvmStakingKeeperMockRecorder is the mock recorder for MockEvmStakingKeeper.
type MockEvmStakingKeeperMockRecorder struct {
	mock *MockEvmStakingKeeper
}

// NewMockEvmStakingKeeper creates a new mock instance.
func NewMockEvmStakingKeeper(ctrl *gomock.Controller) *MockEvmStakingKeeper {
	mock := &MockEvmStakingKeeper{ctrl: ctrl}
	mock.recorder = &MockEvmStakingKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvmStakingKeeper) EXPECT() *MockEvmStakingKeeperMockRecorder {
	return m.recorder
}

// DequeueEligibleWithdrawals mocks base method.
func (m *MockEvmStakingKeeper) DequeueEligibleWithdrawals(ctx context.Context) (types1.Withdrawals, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DequeueEligibleWithdrawals", ctx)
	ret0, _ := ret[0].(types1.Withdrawals)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DequeueEligibleWithdrawals indicates an expected call of DequeueEligibleWithdrawals.
func (mr *MockEvmStakingKeeperMockRecorder) DequeueEligibleWithdrawals(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DequeueEligibleWithdrawals", reflect.TypeOf((*MockEvmStakingKeeper)(nil).DequeueEligibleWithdrawals), ctx)
}

// ParseDepositLog mocks base method.
func (m *MockEvmStakingKeeper) ParseDepositLog(ethlog types1.Log) (*bindings.IPTokenStakingDeposit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseDepositLog", ethlog)
	ret0, _ := ret[0].(*bindings.IPTokenStakingDeposit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseDepositLog indicates an expected call of ParseDepositLog.
func (mr *MockEvmStakingKeeperMockRecorder) ParseDepositLog(ethlog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseDepositLog", reflect.TypeOf((*MockEvmStakingKeeper)(nil).ParseDepositLog), ethlog)
}

// ParseWithdrawLog mocks base method.
func (m *MockEvmStakingKeeper) ParseWithdrawLog(ethlog types1.Log) (*bindings.IPTokenStakingWithdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseWithdrawLog", ethlog)
	ret0, _ := ret[0].(*bindings.IPTokenStakingWithdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseWithdrawLog indicates an expected call of ParseWithdrawLog.
func (mr *MockEvmStakingKeeperMockRecorder) ParseWithdrawLog(ethlog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseWithdrawLog", reflect.TypeOf((*MockEvmStakingKeeper)(nil).ParseWithdrawLog), ethlog)
}

// PeekEligibleWithdrawals mocks base method.
func (m *MockEvmStakingKeeper) PeekEligibleWithdrawals(ctx context.Context) (types1.Withdrawals, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeekEligibleWithdrawals", ctx)
	ret0, _ := ret[0].(types1.Withdrawals)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PeekEligibleWithdrawals indicates an expected call of PeekEligibleWithdrawals.
func (mr *MockEvmStakingKeeperMockRecorder) PeekEligibleWithdrawals(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeekEligibleWithdrawals", reflect.TypeOf((*MockEvmStakingKeeper)(nil).PeekEligibleWithdrawals), ctx)
}

// ProcessDeposit mocks base method.
func (m *MockEvmStakingKeeper) ProcessDeposit(ctx context.Context, ev *bindings.IPTokenStakingDeposit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessDeposit", ctx, ev)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessDeposit indicates an expected call of ProcessDeposit.
func (mr *MockEvmStakingKeeperMockRecorder) ProcessDeposit(ctx, ev any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessDeposit", reflect.TypeOf((*MockEvmStakingKeeper)(nil).ProcessDeposit), ctx, ev)
}

// ProcessStakingEvents mocks base method.
func (m *MockEvmStakingKeeper) ProcessStakingEvents(ctx context.Context, height uint64, logs []*types2.EVMEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessStakingEvents", ctx, height, logs)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessStakingEvents indicates an expected call of ProcessStakingEvents.
func (mr *MockEvmStakingKeeperMockRecorder) ProcessStakingEvents(ctx, height, logs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessStakingEvents", reflect.TypeOf((*MockEvmStakingKeeper)(nil).ProcessStakingEvents), ctx, height, logs)
}

// ProcessWithdraw mocks base method.
func (m *MockEvmStakingKeeper) ProcessWithdraw(ctx context.Context, ev *bindings.IPTokenStakingWithdraw) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessWithdraw", ctx, ev)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessWithdraw indicates an expected call of ProcessWithdraw.
func (mr *MockEvmStakingKeeperMockRecorder) ProcessWithdraw(ctx, ev any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessWithdraw", reflect.TypeOf((*MockEvmStakingKeeper)(nil).ProcessWithdraw), ctx, ev)
}

// MockUpgradeKeeper is a mock of UpgradeKeeper interface.
type MockUpgradeKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockUpgradeKeeperMockRecorder
}

// MockUpgradeKeeperMockRecorder is the mock recorder for MockUpgradeKeeper.
type MockUpgradeKeeperMockRecorder struct {
	mock *MockUpgradeKeeper
}

// NewMockUpgradeKeeper creates a new mock instance.
func NewMockUpgradeKeeper(ctrl *gomock.Controller) *MockUpgradeKeeper {
	mock := &MockUpgradeKeeper{ctrl: ctrl}
	mock.recorder = &MockUpgradeKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpgradeKeeper) EXPECT() *MockUpgradeKeeperMockRecorder {
	return m.recorder
}

// ScheduleUpgrade mocks base method.
func (m *MockUpgradeKeeper) ScheduleUpgrade(ctx context.Context, plan types.Plan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleUpgrade", ctx, plan)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleUpgrade indicates an expected call of ScheduleUpgrade.
func (mr *MockUpgradeKeeperMockRecorder) ScheduleUpgrade(ctx, plan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleUpgrade", reflect.TypeOf((*MockUpgradeKeeper)(nil).ScheduleUpgrade), ctx, plan)
}

// MockMintKeeper is a mock of MintKeeper interface.
type MockMintKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockMintKeeperMockRecorder
}

// MockMintKeeperMockRecorder is the mock recorder for MockMintKeeper.
type MockMintKeeperMockRecorder struct {
	mock *MockMintKeeper
}

// NewMockMintKeeper creates a new mock instance.
func NewMockMintKeeper(ctrl *gomock.Controller) *MockMintKeeper {
	mock := &MockMintKeeper{ctrl: ctrl}
	mock.recorder = &MockMintKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMintKeeper) EXPECT() *MockMintKeeperMockRecorder {
	return m.recorder
}

// ProcessInflationEvents mocks base method.
func (m *MockMintKeeper) ProcessInflationEvents(ctx context.Context, height uint64, logs []*types2.EVMEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessInflationEvents", ctx, height, logs)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessInflationEvents indicates an expected call of ProcessInflationEvents.
func (mr *MockMintKeeperMockRecorder) ProcessInflationEvents(ctx, height, logs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessInflationEvents", reflect.TypeOf((*MockMintKeeper)(nil).ProcessInflationEvents), ctx, height, logs)
}

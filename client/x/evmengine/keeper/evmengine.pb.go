// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: story/evmengine/v1/keeper/evmengine.proto

package keeper

import (
	_ "cosmossdk.io/orm"
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ExecutionHead defines the execution chain head.
// It is a singleton table; it only has a single row with ID==1.
type ExecutionHead struct {
	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedHeight uint64 `protobuf:"varint,2,opt,name=created_height,json=createdHeight,proto3" json:"created_height,omitempty"`
	BlockHeight   uint64 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockHash     []byte `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockTime     uint64 `protobuf:"varint,5,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
}

func (m *ExecutionHead) Reset()         { *m = ExecutionHead{} }
func (m *ExecutionHead) String() string { return proto.CompactTextString(m) }
func (*ExecutionHead) ProtoMessage()    {}
func (*ExecutionHead) Descriptor() ([]byte, []int) {
	return fileDescriptor_413c7d7f9b6ad4e8, []int{0}
}
func (m *ExecutionHead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionHead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutionHead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutionHead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionHead.Merge(m, src)
}
func (m *ExecutionHead) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionHead) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionHead.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionHead proto.InternalMessageInfo

func (m *ExecutionHead) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ExecutionHead) GetCreatedHeight() uint64 {
	if m != nil {
		return m.CreatedHeight
	}
	return 0
}

func (m *ExecutionHead) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ExecutionHead) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *ExecutionHead) GetBlockTime() uint64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func init() {
	proto.RegisterType((*ExecutionHead)(nil), "story.evmengine.v1.keeper.ExecutionHead")
}

func init() {
	proto.RegisterFile("story/evmengine/v1/keeper/evmengine.proto", fileDescriptor_413c7d7f9b6ad4e8)
}

var fileDescriptor_413c7d7f9b6ad4e8 = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xc1, 0x4a, 0xfb, 0x30,
	0x1c, 0xc7, 0x97, 0x6e, 0xff, 0xc1, 0x3f, 0x6e, 0x63, 0xf4, 0x62, 0x15, 0x0c, 0x53, 0x10, 0xe6,
	0xa5, 0x61, 0x7a, 0xf3, 0x28, 0x08, 0x3b, 0x78, 0x1a, 0x9e, 0xbc, 0x48, 0x9b, 0xfe, 0x68, 0xc3,
	0x9a, 0xa6, 0x24, 0x59, 0x99, 0x2f, 0x21, 0x3e, 0x81, 0xef, 0xe1, 0x1b, 0x78, 0x1c, 0x78, 0xf1,
	0x28, 0xed, 0x1b, 0xf8, 0x04, 0xb2, 0xa4, 0x52, 0xaf, 0x9f, 0xef, 0xe7, 0x17, 0xc2, 0x07, 0x5f,
	0x68, 0x23, 0xd5, 0x13, 0x85, 0x4a, 0x40, 0x91, 0xf2, 0x02, 0x68, 0xb5, 0xa0, 0x6b, 0x80, 0x12,
	0x54, 0xc7, 0xc2, 0x52, 0x49, 0x23, 0xfd, 0x23, 0xab, 0x86, 0x1d, 0xae, 0x16, 0xa1, 0x53, 0x8f,
	0x0f, 0x99, 0xd4, 0x42, 0x6a, 0x2a, 0x95, 0xd8, 0x3f, 0x20, 0x95, 0x70, 0x37, 0x67, 0x6f, 0x08,
	0x8f, 0x6f, 0xb7, 0xc0, 0x36, 0x86, 0xcb, 0x62, 0x09, 0x51, 0xe2, 0x4f, 0xb0, 0xc7, 0x93, 0x00,
	0xcd, 0xd0, 0x7c, 0xb0, 0xf2, 0x78, 0xe2, 0x9f, 0xe3, 0x09, 0x53, 0x10, 0x19, 0x48, 0x1e, 0x33,
	0xe0, 0x69, 0x66, 0x02, 0xcf, 0x6e, 0xe3, 0x96, 0x2e, 0x2d, 0xf4, 0x4f, 0xf1, 0x28, 0xce, 0x25,
	0x5b, 0xff, 0x4a, 0x7d, 0x2b, 0x1d, 0x58, 0xd6, 0x2a, 0x27, 0x18, 0xb7, 0x4a, 0xa4, 0xb3, 0x60,
	0x30, 0x43, 0xf3, 0xd1, 0xea, 0xbf, 0x13, 0x22, 0x9d, 0x75, 0xb3, 0xe1, 0x02, 0x82, 0x7f, 0xf6,
	0xde, 0xcd, 0xf7, 0x5c, 0xc0, 0xf5, 0xf4, 0xfb, 0xf5, 0xe3, 0xb9, 0x8f, 0xf1, 0x70, 0xff, 0xbf,
	0x29, 0x0a, 0xd0, 0xcd, 0xdd, 0x7b, 0x4d, 0xd0, 0xae, 0x26, 0xe8, 0xab, 0x26, 0xe8, 0xa5, 0x21,
	0xbd, 0x5d, 0x43, 0x7a, 0x9f, 0x0d, 0xe9, 0x3d, 0x5c, 0xa6, 0xdc, 0x64, 0x9b, 0x38, 0x64, 0x52,
	0xd0, 0x92, 0x97, 0x79, 0x14, 0x6b, 0xea, 0x3a, 0xb2, 0x9c, 0x43, 0x61, 0xe8, 0xf6, 0x4f, 0x50,
	0x97, 0x28, 0x1e, 0xda, 0x20, 0x57, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x50, 0xa9, 0xab, 0xc5,
	0x71, 0x01, 0x00, 0x00,
}

func (m *ExecutionHead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionHead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionHead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockTime != 0 {
		i = encodeVarintEvmengine(dAtA, i, uint64(m.BlockTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintEvmengine(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvmengine(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.CreatedHeight != 0 {
		i = encodeVarintEvmengine(dAtA, i, uint64(m.CreatedHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintEvmengine(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvmengine(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvmengine(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExecutionHead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvmengine(uint64(m.Id))
	}
	if m.CreatedHeight != 0 {
		n += 1 + sovEvmengine(uint64(m.CreatedHeight))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEvmengine(uint64(m.BlockHeight))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovEvmengine(uint64(l))
	}
	if m.BlockTime != 0 {
		n += 1 + sovEvmengine(uint64(m.BlockTime))
	}
	return n
}

func sovEvmengine(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvmengine(x uint64) (n int) {
	return sovEvmengine(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExecutionHead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvmengine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionHead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionHead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedHeight", wireType)
			}
			m.CreatedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvmengine
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmengine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			m.BlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmengine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvmengine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvmengine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvmengine(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvmengine
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvmengine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvmengine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvmengine
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvmengine
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvmengine
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvmengine        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvmengine          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvmengine = fmt.Errorf("proto: unexpected end of group")
)

syntax = "proto3";
package story.epochs.v1.types;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "story/epochs/v1/types/genesis.proto";

option go_package = "github.com/piplabs/story/client/x/epochs/types";

// Query defines the gRPC querier service.
service Query {
  // EpochInfos provide running epochInfos
  rpc EpochInfos(QueryEpochInfosRequest) returns (QueryEpochInfosResponse) {
    option (google.api.http).get          = "/story/epochs/v1/epochs";
  }
  // CurrentEpoch provide current epoch of specified identifier
  rpc CurrentEpoch(QueryCurrentEpochRequest) returns (QueryCurrentEpochResponse) {
    option (google.api.http).get          = "/story/epochs/v1/current_epoch";
  }
}

// QueryEpochInfosRequest defines the gRPC request structure for
// querying all epoch info.
message QueryEpochInfosRequest {}

// QueryEpochInfosRequest defines the gRPC response structure for
// querying all epoch info.
message QueryEpochInfosResponse {
  repeated EpochInfo epochs = 1 [(gogoproto.nullable) = false];
}

// QueryCurrentEpochRequest defines the gRPC request structure for
// querying an epoch by its identifier.
message QueryCurrentEpochRequest {
  string identifier = 1;
}

// QueryCurrentEpochResponse defines the gRPC response structure for
// querying an epoch by its identifier.
message QueryCurrentEpochResponse {
  int64 current_epoch = 1;
}